// ?
import React, { useState, useEffect, useContext } from 'react';
import GridBuilder from './GridBuilder'; //Сетка
import Icon from '../SVG/Icon'; //Иконки
import { BuildingData, ServerSpeed, speedKeyMap, BuildingLevelDetail } from '../Builder/path/BuildingData';
import FiltersTable from './FiltersTable';
import { Buildings } from '../Builder/BuilderArray';
import BuilderContext from '../Builder/BuilderContext';

const BuilderTable: React.FC<{ building: BuildingData }> = ({ building }) => {
  const [fromRowData, setFromRowData] = useState("");
  const [toRowData, setToRowData] = useState("");
  const [storageType, setStorageType] = useState<'Small' | 'Big'>('Small');


  const [serverSpeed, setServerSpeed] = useState<ServerSpeed>(() => localStorage.getItem('selectedDropdownItem') as ServerSpeed || "T 4.6 1x");
  const [mainBuildingLevel, setMainBuildingLevel] = useState(1);
  const [selectedRows, setSelectedRows] = React.useState<number[]>([]);

    
  const [isUpgradeActive, setIsUpgradeActive] = useState(false);

  useEffect(() => {
    const newLevel = parseInt(localStorage.getItem('selectedMainBuildingItem') || '1');
    setMainBuildingLevel(newLevel);
  }, []);

  // Обработчики изменений состояния
  const handleServerSpeedChange = (speed: string) => {if (speed in speedKeyMap) {setServerSpeed(speed as ServerSpeed);}};
  const handleMainBuildingLevelChange = (level: string) => {const newLevel = parseInt(level); setMainBuildingLevel(newLevel);};
  const handleUpgradeChange = (active: boolean) => {setIsUpgradeActive(active);};
  const { lastRowTimeData, lastRowSumDataLumber, lastRowSumDataClay, lastRowSumDataIron, lastRowSumDataCrop, lastRowSumDataResources,
    lastRowSumDataCropBalance, lastRowSumDataCP, lastRowSumDataWarehouse, lastRowSumDataGranary, } = useContext(BuilderContext);
  const { setLastRowTimeData } = useContext(BuilderContext);

  const handleStorageTypeChange = (type: 'Small' | 'Big') => {
    setStorageType(type); // Обновление состояния
  };

  //Титульные данные
  const topRow1 = building.Name;
  const topRow2 = building.Prerequiresites;
  const topRow3 = building.Description;
  const imagePath = building.image;

  // Генерация данных для сетки
  const generateGridData = () => {
    const constructionTimeReduction = (Buildings.MainBuilding.levels as Record<string, BuildingLevelDetail>)[`lvl${mainBuildingLevel}`]?.ConstructionTime || 100;
    const gridData = [
      ["lvl", React.createElement(Icon.Resources.Lumber, { size: "100%" }), React.createElement(Icon.Resources.Clay, { size: "100%" }), React.createElement(Icon.Resources.Iron, { size: "100%" }), React.createElement(Icon.Resources.Crop, { size: "100%" }), React.createElement(Icon.Resources.Resources, { size: "100%" }), React.createElement(Icon.Resources.CropBalance, { size: "100%" }), "ЕК", React.createElement(Icon.Other.Time, { size: "100%" }), React.createElement(Icon.Building.Warehouse, { size: "100%" }), React.createElement(Icon.Building.Granary, { size: "100%" }), building.OtherTitle]
    ];
    // Определяем максимальное количество уровней
    const maxLevels = Object.keys(building.levels).length;

    for (let i = 1; i <= maxLevels; i++) {
      const levelKey = `lvl${i}`;
      const levelData = building.levels[levelKey];
  
      let warehouseData = '-';
      let granaryData = '-';
  
      // Убедитесь, что у levelData есть свойства Warehouse и Granary
      if (levelData && levelData.Warehouse && levelData.Warehouse[storageType]) {
        warehouseData = levelData.Warehouse[storageType];
      }
      if (levelData && levelData.Granary && levelData.Granary[storageType]) {
        granaryData = levelData.Granary[storageType];
      }

      if (levelData) {
        const speedKey = speedKeyMap[serverSpeed];
        const originalTime = levelData.Time ? levelData.Time[speedKey] : "00:00:00";
        const timeParts = originalTime.split(':').map(Number);
        const totalTimeInSeconds = timeParts[0] * 3600 + timeParts[1] * 60 + timeParts[2];
        let reducedTimeInSeconds = totalTimeInSeconds * (constructionTimeReduction / 100);
        if (isUpgradeActive) {
            reducedTimeInSeconds -= reducedTimeInSeconds * 0.25; // Уменьшаем на 25% от уже уменьшенного времени
        }
        const reducedTimeString = new Date(reducedTimeInSeconds * 1000).toISOString().substr(11, 8);
          
        gridData.push([
        String(levelData.lvl || '-'),
        String(levelData.Lumber || '-'),
        String(levelData.Clay || '-'),
        String(levelData.Iron || '-'),
        String(levelData.Crop || '-'),
        String(levelData.Resources || '-'),
        String(levelData.CropBalance || '-'),
        String(levelData.CP || '-'),
        reducedTimeString,
        warehouseData, // Используйте warehouseData здесь
        granaryData, // Используйте granaryData здесь
        String(levelData.Other || '-')
        ]);
      }
    }

    // Добавляем последнюю строку для итогов только если есть уровни
    if (maxLevels > 0) {
      gridData.push(Array(12).fill('-'));
    }
    return gridData;
  };
// Создаем массив ширин колонок, где первая колонка 20, последняя 300, а остальные 40
  const cellWidths = Array(12).fill(60); // сначала заполните все колонки шириной 40
  cellWidths[0] = 30;
  cellWidths[6] = 30; 
  cellWidths[7] = 30; 
  cellWidths[8] = 80;
  cellWidths[9] = 80;
  cellWidths[10] = 80;
  cellWidths[11] = 220;

  const [data, setData] = useState(generateGridData());
  useEffect(() => { setData(generateGridData()); }, [mainBuildingLevel, serverSpeed, isUpgradeActive, storageType]);

  const handleCellClick = (rowIndex: number) => {
    if (rowIndex !== 0 && rowIndex !== data.length - 1) {
      setSelectedRows((prevSelected) => {
        const updatedSelected = prevSelected.includes(rowIndex)
          ? prevSelected.filter((r) => r !== rowIndex)
          : [...prevSelected, rowIndex].slice(-2);
  
        if (updatedSelected.length > 0) {
          const lowestRowIndex = Math.min(...updatedSelected);
          const highestRowIndex = Math.max(...updatedSelected);
          setFromRowData(String(lowestRowIndex));
          setToRowData(String(highestRowIndex));
        } else {
          setFromRowData("");
          setToRowData("");
        }
  
        return updatedSelected;
      });
    }
  };
  
  
  

return (
    <div className="container mx-auto p-4">
      <FiltersTable 
        onServerSpeedChange={handleServerSpeedChange} 
        onMainBuildingLevelChange={handleMainBuildingLevelChange}
        onUpgradeChange={handleUpgradeChange}
        isUpgradeActive={isUpgradeActive}
        buildingName={topRow1}
        timeData={lastRowTimeData}
        sumDataLumber={lastRowSumDataLumber}
        sumDataClay={lastRowSumDataClay}
        sumDataIron={lastRowSumDataIron}
        sumDataCrop={lastRowSumDataCrop}
        sumDataResources={lastRowSumDataResources}
        sumDataCropBalance={lastRowSumDataCropBalance}
        sumDataCP={lastRowSumDataCP}
        sumDataWarehouse={lastRowSumDataWarehouse}
        sumDataGranary={lastRowSumDataGranary}
        fromRowData={fromRowData}
        toRowData={toRowData}
        mainBuildingLevel={mainBuildingLevel.toString()}
        setStorageType={handleStorageTypeChange}
      />
      
      <GridBuilder
        key={Date.now()}
        numRows={data.length}
        numCols={cellWidths.length}
        cellWidths={cellWidths}
        cellHeight={24}
        gap={1}
        imagePath={imagePath}
        data={data} // Передаем данные в GridBuilder
        topRow1={topRow1}
        topRow2={topRow2}
        topRow3={topRow3}
        onCellClick={handleCellClick} // передача функции
        selectedRows={selectedRows} // передача выбранной строки
        setLastRowTimeData={setLastRowTimeData}
              />
    </div>
  );
};

export default BuilderTable;
