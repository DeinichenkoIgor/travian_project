// BuilderTable.tsx
import React, { useState, useEffect } from 'react';
import GridBuilder from './GridBuilder'; //Сетка
import NumberComponent from '../NumberComponent'; //Переобразователь
import Icon from '../SVG/Icon'; //Иконки
import Image from 'next/image';
import { BuildingData, ServerSpeed, speedKeyMap, BuildingLevelDetail } from '../Builder/path/BuildingData';
import FiltersTable from './FiltersTable';
import { Buildings } from '../Builder/BuilderArray';

const BuilderTable: React.FC<{ building: BuildingData }> = ({ building }) => {
  const [serverSpeed, setServerSpeed] = useState<ServerSpeed>(() => localStorage.getItem('selectedDropdownItem') as ServerSpeed || "T 4.6 1x");
  const [mainBuildingLevel, setMainBuildingLevel] = useState(1);
  const [selectedRows, setSelectedRows] = React.useState<number[]>([]);
  const [lastSelectedValue, setLastSelectedValue] = React.useState<string | null>(null);
  const handleServerSpeedChange = (speed: string) => {if (speed in speedKeyMap) {setServerSpeed(speed as ServerSpeed);}};
  const handleMainBuildingLevelChange = (level: string) => {
    const newLevel = parseInt(level);
    setMainBuildingLevel(newLevel);
  };
  const [isUpgradeActive, setIsUpgradeActive] = useState(false);
  const handleUpgradeChange = (active: boolean) => {
    setIsUpgradeActive(active);
};
  useEffect(() => {
    const newLevel = parseInt(localStorage.getItem('selectedMainBuildingItem') || '1');
    setMainBuildingLevel(newLevel);
  }, []);

  const topRow1 = building.Name;
  const topRow2 = building.Prerequiresites;
  const topRow3 = building.Description;
  const imagePath = building.image;

  // Генерация данных для сетки
  const generateGridData = () => {
    const constructionTimeReduction = (Buildings.MainBuilding.levels as Record<string, BuildingLevelDetail>)[`lvl${mainBuildingLevel}`]?.ConstructionTime || 100;
    const gridData = [
      ["lvl", React.createElement(Icon.Resources.Lumber, { size: "100%" }), React.createElement(Icon.Resources.Clay, { size: "100%" }), React.createElement(Icon.Resources.Iron, { size: "100%" }), React.createElement(Icon.Resources.Crop, { size: "100%" }), React.createElement(Icon.Resources.Resources, { size: "100%" }), React.createElement(Icon.Resources.CropBalance, { size: "100%" }), "ЕК", React.createElement(Icon.Other.Time, { size: "100%" }), React.createElement(Icon.Building.Warehouse, { size: "100%" }), React.createElement(Icon.Building.Granary, { size: "100%" }), building.OtherTitle]
    ];
    // Определяем максимальное количество уровней
    const maxLevels = Object.keys(building.levels).length;

    for (let i = 1; i <= maxLevels; i++) {
      const levelKey = `lvl${i}`;
      const levelData = building.levels[levelKey];
      if (levelData) {
        const speedKey = speedKeyMap[serverSpeed];
        const originalTime = levelData.Time ? levelData.Time[speedKey] : "00:00:00";
        const timeParts = originalTime.split(':').map(Number);
        const totalTimeInSeconds = timeParts[0] * 3600 + timeParts[1] * 60 + timeParts[2];
        let reducedTimeInSeconds = totalTimeInSeconds * (constructionTimeReduction / 100);
        if (isUpgradeActive) {
            reducedTimeInSeconds -= reducedTimeInSeconds * 0.25; // Уменьшаем на 25% от уже уменьшенного времени
        }
        const reducedTimeString = new Date(reducedTimeInSeconds * 1000).toISOString().substr(11, 8);
          
        gridData.push([
        String(levelData.lvl || '-'),
        String(levelData.Lumber || '-'),
        String(levelData.Clay || '-'),
        String(levelData.Iron || '-'),
        String(levelData.Crop || '-'),
        String(levelData.Resources || '-'),
        String(levelData.CropBalance || '-'),
        String(levelData.CP || '-'),
        reducedTimeString,
        String(levelData.Warehouse || '-'),
        String(levelData.Granary || '-'),
        String(levelData.Other || '-')
        ]);
      }
    }

    // Добавляем последнюю строку для итогов только если есть уровни
    if (maxLevels > 0) {
      gridData.push(Array(12).fill('-'));
    }
    return gridData;
  };
// Создаем массив ширин колонок, где первая колонка 20, последняя 300, а остальные 40
  const cellWidths = Array(12).fill(60); // сначала заполните все колонки шириной 40
  cellWidths[0] = 30; // измените ширину первой колонки на 20
  cellWidths[6] = 30; 
  cellWidths[7] = 30; 
  cellWidths[8] = 80;
  cellWidths[9] = 80;
  cellWidths[10] = 80;
  cellWidths[11] = 220; // измените ширину последней колонки на 300

  useEffect(() => {
    localStorage.setItem('selectedDropdownItem', serverSpeed);
  }, [serverSpeed]);
  const [data, setData] = useState(generateGridData());
  useEffect(() => {
    let newData = generateGridData();
    if (selectedRows.length === 2 && lastSelectedValue !== null) {
        const numericValue = lastSelectedValue ? parseInt(lastSelectedValue, 10) : 0;
        newData[newData.length - 1][0] = <NumberComponent number={numericValue} />;
    }
    setData(newData);
}, [mainBuildingLevel, serverSpeed, selectedRows, lastSelectedValue, isUpgradeActive]);
  const finalData = data; // Теперь finalData это просто data
  const handleCellClick = (rowIndex: number) => {
    if (rowIndex !== 0 && rowIndex !== data.length - 1) {
        setSelectedRows((prevSelected) => {
            const updatedSelected = [...prevSelected];
            if (updatedSelected.includes(rowIndex)) {
                // Удалить, если строка уже выбрана
                return updatedSelected.filter((r) => r !== rowIndex);
            } else if (updatedSelected.length === 2) {
                // Сохраняем последнее значение с самой нижней выбранной строки
                const lowestSelectedRow = Math.max(...updatedSelected);
                const valueToSave = data[lowestSelectedRow][0]; // Убедитесь, что это строка или число!
                setLastSelectedValue(String(valueToSave));
                return [rowIndex]; // Сбросить и начать заново с текущей строки
            } else {
                // Добавить новую строку
                return [...updatedSelected, rowIndex].slice(-2);
            }
        });
    }
};

return (
    <div className="container mx-auto p-4">
      <FiltersTable 
        onServerSpeedChange={handleServerSpeedChange} 
        onMainBuildingLevelChange={handleMainBuildingLevelChange}
        onUpgradeChange={handleUpgradeChange}
        isUpgradeActive={isUpgradeActive}
        buildingName={topRow1} // Передаем название здания в FiltersTable
      />
      
      <GridBuilder
        key={Date.now()}
        numRows={finalData.length}
        numCols={cellWidths.length}
        cellWidths={cellWidths}
        cellHeight={24}
        gap={1}
        imagePath={imagePath}
        data={finalData} // Передаем данные в GridBuilder
        topRow1={topRow1}
        topRow2={topRow2}
        topRow3={topRow3}
        onCellClick={handleCellClick} // передача функции
        selectedRows={selectedRows} // передача выбранной строки
              />
    </div>
  );
};

export default BuilderTable;