//GridBuilder.tsx
import React, { useContext } from 'react';
import Image from 'next/image'; // Импортируем Image компонент из Next.js
import { GridBuilderProps } from '../Builder/path/BuildingData';
import { timeToSeconds, secondsToTime } from './timeUtils';
import BuilderContext from './BuilderContext';


  const GridBuilder: React.FC<GridBuilderProps> = ({
  data, // Получаем данные как пропс
  numRows,
  numCols,
  cellWidths,
  cellHeight,
  gap,
  imagePath,
  topRow1,
  topRow2,
  topRow3,
  onCellClick,
  selectedRows,  // используем массив выбранных строк
  setLastRowTimeData,
  }) => {
    
    // Убедимся, что у нас есть ширина для каждой колонки, иначе используем значение по умолчанию
  const adjustedCellWidths = cellWidths.length === numCols ? cellWidths : new Array(numCols).fill(40);
  // Рассчитываем общую ширину сетки, учитывая отступы
  const totalWidth = adjustedCellWidths.reduce((acc, width) => acc + width, 0) + (numCols - 1) * gap;
  const getCellBackground = (rowIndex: number) => {
    // Если строка последняя, применить синий фон
    if (rowIndex === numRows - 1) {
        return 'bg-[#A0BE3C]/60'; // или любой другой класс/стиль для синего цвета
    } else if (selectedRows.includes(rowIndex)) {
        return 'bg-[#82D2F3]'; // Желтый для выбранных строк
    } else if (selectedRows.length === 2 && (rowIndex > Math.min(...selectedRows) && rowIndex < Math.max(...selectedRows))) {
        return 'bg-[#82D2F3]/40'; // Зеленый для строк между выбранными
    }
    return ''; // Нет фона по умолчанию
}
// И затем используйте эту функцию в месте, где вы генерируете ячейки сетки
if (selectedRows.length === 1 || selectedRows.length === 2) {
  // Индексы самых высокой и низкой выбранных строк
  const lowestSelectedRowIndex = Math.min(...selectedRows); 
  const highestSelectedRowIndex = selectedRows.length === 1 ? lowestSelectedRowIndex : Math.max(...selectedRows); 

  let sums = Array(8).fill(0); // Массив для сумм столбцов 2-8
  // Суммирование значений для столбцов 2-8
  for (let i = lowestSelectedRowIndex; i <= highestSelectedRowIndex; i++) {
    for (let col = 1; col <= 7; col++) { // Столбцы 2-8
        const value = Number(data[i][col]);
        if (!isNaN(value)) { // Убедимся, что это число
            sums[col-1] += value; // Сохраняем сумму для каждого столбца
        }
    }
  }

// Суммирование времени для 9-го столбца
let totalSeconds = 0;
for (let i = lowestSelectedRowIndex; i <= highestSelectedRowIndex; i++) {
  const timeString = data[i][8]; // Предполагаем, что данные времени находятся в 9-м столбце (индекс 8)
  if (typeof timeString === 'string') {
    totalSeconds += timeToSeconds(timeString);
  }
}

// Обновляем последнюю строку
const updatedLastRow = [...data[data.length - 1]]; 
updatedLastRow[0] = data[highestSelectedRowIndex][0]; // Сохраняем функцию для 1-го столбца
for (let col = 1; col <= 7; col++) {
    updatedLastRow[col] = selectedRows.length === 1 ? data[lowestSelectedRowIndex][col] : sums[col-1]; // Обновляем столбцы 2-8
}

const { setLastRowSumDataLumber, setLastRowSumDataClay,
  setLastRowSumDataIron,
  setLastRowSumDataCrop,
  setLastRowSumDataResources,
  setLastRowSumDataCropBalance,
  setLastRowSumDataCP,
  setLastRowSumDataWarehouse,
  setLastRowSumDataGranary } = useContext(BuilderContext);

  setLastRowSumDataLumber(updatedLastRow[1].toString());
  setLastRowSumDataClay(updatedLastRow[2].toString());
  setLastRowSumDataIron(updatedLastRow[3].toString());
  setLastRowSumDataCrop(updatedLastRow[4].toString());
  setLastRowSumDataResources(updatedLastRow[5].toString());
  setLastRowSumDataCropBalance(updatedLastRow[6].toString());
  setLastRowSumDataCP(updatedLastRow[7].toString());

  updatedLastRow[8] = selectedRows.length === 1 ? data[lowestSelectedRowIndex][8] : secondsToTime(totalSeconds);
    data[data.length - 1] = updatedLastRow;
  // Сохраняем текущие функции для столбцов 10, 11, и 12
  updatedLastRow[9] = data[highestSelectedRowIndex][9]; // Столбец 10
  updatedLastRow[10] = data[highestSelectedRowIndex][10]; // Столбец 11
  updatedLastRow[11] = data[highestSelectedRowIndex][11]; // Столбец 12

if (typeof updatedLastRow[8] === 'string') {
  setLastRowTimeData(updatedLastRow[8]);
} else {
  setLastRowTimeData('-');
}
if (typeof updatedLastRow[9] === 'string') {
  setLastRowSumDataWarehouse(updatedLastRow[9]);
} else {
  setLastRowSumDataWarehouse('-');
}
if (typeof updatedLastRow[10] === 'string') {
  setLastRowSumDataGranary(updatedLastRow[10]);
} else {
  setLastRowSumDataGranary('-');
}

data[data.length - 1] = updatedLastRow; // Обновляем данные для последней строки


}

return (
    <div>
      <div className="flex mb-[1px]" style={{ width: `${totalWidth}px` }}>
        {/* Объединенная ячейка для первых трех строк */}
        <div
          className="relative border border-gray-200"
          style={{ width: `calc(20% - ${gap}px)`, height: `${3 * cellHeight + 2 * gap}px` }}
        >
          <div className="relative w-full h-full">
            <Image src={imagePath} alt="Unique Image" layout="fill" objectFit="contain" />
          </div>
        </div>
        
        {/* Отдельные ячейки для каждой из трех строк, используя пропсы */}
        <div className="flex flex-col justify-between" style={{ width: `calc(80% - ${gap}px)` }}>
          <div className="w-full border border-gray-200" style={{ height: `${cellHeight}px` }}>
            {topRow1}
          </div>
          <div className="w-full border border-gray-200" style={{ height: `${cellHeight}px` }}>
            {topRow2}
          </div>
          <div className="w-full border border-gray-200" style={{ height: `${cellHeight}px` }}>
            {topRow3}
          </div>
        </div>
      </div>

      {/* Основная сетка */}
      <div
        className="grid"
        style={{
          gridTemplateRows: `repeat(${numRows}, ${cellHeight}px)`,
          gridTemplateColumns: adjustedCellWidths.map(width => `${width}px`).join(' '),
          gap: `${gap}px`,
        }}
      >
        {/* Генерируем ячейки сетки */}
        {data.map((row, rowIndex) => (
          row.map((cell, colIndex) => (
            <div
                key={`row-${rowIndex}-col-${colIndex}`} // Уникальный ключ
                className={`border border-gray-200 flex items-center justify-center ${getCellBackground(rowIndex)}`} // Используем getCellBackground для определения фона
                style={{ height: `${cellHeight}px`, width: `${adjustedCellWidths[colIndex]}px` }}
                onClick={() => onCellClick(rowIndex)} // Обработка клика
              >
              {cell || <span>&nbsp;</span>}
            </div>
          ))
        ))}
      </div>
    </div>
  );
};

export default GridBuilder